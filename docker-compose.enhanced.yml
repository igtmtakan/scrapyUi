# ScrapyUI 強化アーキテクチャ Docker Compose
version: '3.8'

services:
  # Playwright専用サービス
  playwright-service:
    build:
      context: ./services/playwright-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - PORT=8004
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
      - NODE_OPTIONS=--max-old-space-size=4096
    volumes:
      - playwright-cache:/ms-playwright
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # FastAPI バックエンド（強化版）
  backend-enhanced:
    build:
      context: .
      dockerfile: backend/Dockerfile.enhanced
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql://scrapy_user:ScrapyUser@2024#@mysql:3306/scrapy_ui
      - REDIS_URL=redis://redis:6379/0
      - PLAYWRIGHT_SERVICE_URL=http://playwright-service:8004
      - CORS_ORIGINS=http://localhost:4000,http://localhost:3001
    volumes:
      - ./scrapy_projects:/app/scrapy_projects
      - ./backend/database:/app/backend/database
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
      - playwright-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Next.js フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend-enhanced
    restart: unless-stopped

  # Node.js Puppeteer サービス
  nodejs-service:
    build:
      context: ./nodejs
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    restart: unless-stopped

  # MySQL データベース
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=scrapy_ui
      - MYSQL_USER=scrapy_user
      - MYSQL_PASSWORD=ScrapyUser@2024#
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Prometheus 監視
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana ダッシュボード
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend-enhanced
      - playwright-service
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  prometheus-data:
  grafana-data:
  playwright-cache:

networks:
  default:
    driver: bridge
