#!/usr/bin/env python3
"""
ScrapyUI Microservices API
„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁµ±ÂêàAPI
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import BaseModel

from ..database import get_db
from ..api.auth import get_current_active_user
from ..services.microservice_client import microservice_client

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/microservices", tags=["microservices"])

class WatchdogExecutionRequest(BaseModel):
    project_id: str
    spider_id: str
    project_path: str
    spider_name: str
    task_id: Optional[str] = None
    settings: Optional[Dict] = None

class WatchdogExecutionResponse(BaseModel):
    success: bool
    task_id: str
    message: str
    error: Optional[str] = None

@router.get("/health")
async def microservices_health_check():
    """„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÂÖ®‰Ωì„ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ"""
    try:
        health_status = {}
        
        # ÂêÑ„Çµ„Éº„Éì„Çπ„ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        services = ["test_service", "spider_manager", "scheduler", "result_collector"]
        
        for service in services:
            try:
                is_healthy = microservice_client.health_check(service)
                health_status[service] = {
                    "status": "healthy" if is_healthy else "unhealthy",
                    "url": microservice_client._get_service_url(service)
                }
            except Exception as e:
                health_status[service] = {
                    "status": "error",
                    "error": str(e),
                    "url": microservice_client._get_service_url(service)
                }
        
        # ÂÖ®‰Ωì„Çπ„ÉÜ„Éº„Çø„ÇπÂà§ÂÆö
        all_healthy = all(
            status["status"] == "healthy" 
            for status in health_status.values()
        )
        
        return {
            "status": "healthy" if all_healthy else "degraded",
            "services": health_status,
            "timestamp": datetime.now().isoformat(),
            "available": microservice_client.is_microservice_available()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Microservices health check error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/stats")
async def get_microservices_stats():
    """„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁµ±Ë®àÊÉÖÂ†±ÂèñÂæó"""
    try:
        stats = {
            "timestamp": datetime.now().isoformat(),
            "services": {}
        }
        
        # Spider ManagerÁµ±Ë®à
        try:
            spider_stats = await microservice_client.get_spider_manager_metrics()
            stats["services"]["spider_manager"] = spider_stats
        except Exception as e:
            stats["services"]["spider_manager"] = {"error": str(e)}
        
        # „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Çπ„ÇØÊÉÖÂ†±
        try:
            active_tasks = await microservice_client.get_active_watchdog_tasks()
            stats["services"]["active_watchdog_tasks"] = active_tasks
        except Exception as e:
            stats["services"]["active_watchdog_tasks"] = {"error": str(e)}
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get microservices stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/spider-manager/execute-watchdog", response_model=WatchdogExecutionResponse)
async def execute_spider_with_watchdog(
    request: WatchdogExecutionRequest,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_active_user)
):
    """watchdogÁõ£Ë¶ñ‰ªò„Åç„Çπ„Éë„Ç§„ÉÄ„ÉºÂÆüË°å"""
    try:
        logger.info(f"üöÄ Executing spider with watchdog: {request.spider_name}")
        
        # „Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁµåÁî±„ÅßÂÆüË°å
        result = microservice_client.execute_spider_with_watchdog_sync(
            project_id=request.project_id,
            spider_id=request.spider_id,
            project_path=request.project_path,
            spider_name=request.spider_name,
            task_id=request.task_id,
            settings=request.settings
        )
        
        if result["success"]:
            return WatchdogExecutionResponse(
                success=True,
                task_id=result["task_id"],
                message="Spider execution started successfully"
            )
        else:
            return WatchdogExecutionResponse(
                success=False,
                task_id=result.get("task_id", "unknown"),
                message="Spider execution failed",
                error=result.get("error")
            )
            
    except Exception as e:
        logger.error(f"‚ùå Spider execution error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/spider-manager/metrics")
async def get_spider_manager_metrics():
    """Spider Manager„É°„Éà„É™„ÇØ„ÇπÂèñÂæó"""
    try:
        metrics = await microservice_client.get_spider_manager_metrics()
        return metrics
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get spider manager metrics: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/spider-manager/watchdog/active")
async def get_active_watchdog_tasks():
    """„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™watchdog„Çø„Çπ„ÇØÂèñÂæó"""
    try:
        active_tasks = await microservice_client.get_active_watchdog_tasks()
        return active_tasks
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get active watchdog tasks: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/spider-manager/watchdog/{task_id}/stop")
async def stop_watchdog_task(
    task_id: str,
    current_user = Depends(get_current_active_user)
):
    """watchdog„Çø„Çπ„ÇØÂÅúÊ≠¢"""
    try:
        success = await microservice_client.stop_watchdog_task(task_id)
        
        if success:
            return {
                "message": "Watchdog task stopped successfully",
                "task_id": task_id,
                "timestamp": datetime.now().isoformat()
            }
        else:
            raise HTTPException(status_code=404, detail="Task not found or already stopped")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Failed to stop watchdog task {task_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/migration/status")
async def get_migration_status():
    """Celery„Åã„Çâ„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„Çπ„Å∏„ÅÆÁßªË°åÁä∂Ê≥Å"""
    try:
        # Celery„Éó„É≠„Çª„ÇπÁ¢∫Ë™ç
        import subprocess
        import psutil
        
        celery_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'celery' in cmdline.lower() or 'flower' in cmdline.lower():
                    celery_processes.append({
                        "pid": proc.info['pid'],
                        "name": proc.info['name'],
                        "cmdline": cmdline[:100]  # ÊúÄÂàù„ÅÆ100ÊñáÂ≠ó
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # „Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁä∂Ê≥Å
        microservice_available = microservice_client.is_microservice_available()
        
        # ÁßªË°åÁä∂Ê≥ÅÂà§ÂÆö
        if len(celery_processes) == 0 and microservice_available:
            migration_status = "completed"
            message = "Migration completed: Celery processes removed, microservices available"
        elif len(celery_processes) > 0 and microservice_available:
            migration_status = "in_progress"
            message = "Migration in progress: Both Celery and microservices running"
        elif len(celery_processes) == 0 and not microservice_available:
            migration_status = "incomplete"
            message = "Migration incomplete: Celery removed but microservices not available"
        else:
            migration_status = "not_started"
            message = "Migration not started: Only Celery processes running"
        
        return {
            "migration_status": migration_status,
            "message": message,
            "celery_processes": celery_processes,
            "celery_count": len(celery_processes),
            "microservice_available": microservice_available,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get migration status: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/migration/complete")
async def complete_migration(
    current_user = Depends(get_current_active_user)
):
    """ÁßªË°åÂÆå‰∫ÜÂá¶ÁêÜ"""
    try:
        # ÊÆãÂ≠òCelery„Éó„É≠„Çª„Çπ„ÇíÂÅúÊ≠¢
        import subprocess
        import psutil
        
        stopped_processes = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                cmdline = ' '.join(proc.info['cmdline'] or [])
                if 'celery' in cmdline.lower() or 'flower' in cmdline.lower():
                    proc.terminate()
                    stopped_processes.append({
                        "pid": proc.info['pid'],
                        "name": proc.info['name']
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        # „Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„ÇπÁ¢∫Ë™ç
        microservice_available = microservice_client.is_microservice_available()
        
        return {
            "message": "Migration completion attempted",
            "stopped_processes": stopped_processes,
            "microservice_available": microservice_available,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Failed to complete migration: {e}")
        raise HTTPException(status_code=500, detail=str(e))
